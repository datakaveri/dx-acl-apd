{
	"info": {
		"_postman_id": "bb5d58fd-9df8-46e1-bf19-e16ce66adc7f",
		"name": "DX-ACL-APD",
		"description": "**DX-ACL-APD** **Collection**:  \nThe \"DX-ACL-APD\" collection is a comprehensive set of APIs that encompass three essential aspects of access management within a system:\n\n1. **Token Management (Token)**:\n    - This component of the collection provides the means to acquire an Identity Access Token, which is a fundamental requirement for executing various functionalities within the system, including Policy and Access Request APIs.\n2. **Policy Management (Policy)**:\n    - The \"DX-ACL-APD\" collection includes APIs that streamline the creation, deletion, and retrieval of user-generated policies. These policies define access control rules and permissions, ensuring a structured approach to access management.\n3. **Access Request Management (Access Request)**:\n    - Within this collection, users can initiate policy requests, obtain lists of generated access requests, delete specific requests, and manage requests by approving or rejecting them.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23856712"
	},
	"item": [
		{
			"name": "token",
			"item": [
				{
					"name": "Get Provider token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"provider\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the provider token."
					},
					"response": []
				},
				{
					"name": "Get Consumer token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the consumer token."
					},
					"response": []
				},
				{
					"name": "Get Provider Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "f09442e6-f6ca-42fb-a57e-821b4c85fd0d",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the provider delegate token."
					},
					"response": []
				},
				{
					"name": "Get Consumer Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "3ba85a05-061e-4d5b-b7f9-8c254edb202d",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"rs.iudx.io\",\n    \"itemType\": \"resource_server\",\n    \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "This API supplies the consumer delegate token."
					},
					"response": []
				}
			],
			"description": "The collection comprises APIs that provide the Identity Access Token, which is essential for executing Policy and Access Request APIs."
		},
		{
			"name": "policy",
			"item": [
				{
					"name": "Create Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"acl-apd.integration-consumer@datakaveri.org\",\n      \"itemId\": \"{{item_id}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"2030-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "This API allows users to create new policies. Users can define and configure policies based on their specific requirements using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get resource access token as consumer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isPipelineForDev = pm.environment.get('isIntegrationTestBeingRunInCiPipelineForDev') == 'true';",
									"// Test the response code",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Token created\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{item_id}}\",\n    \"itemType\": \"resource\",\n    \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}/auth/v1/token",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"auth",
								"v1",
								"token"
							]
						},
						"description": "Get resource access token based on the policy created by the provider"
					},
					"response": []
				},
				{
					"name": "Get Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "Delete Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				}
			],
			"description": "The collection includes APIs that facilitate the creation, deletion, and retrieval of user-generated policies."
		},
		{
			"name": "access request",
			"item": [
				{
					"name": "Create Access Request for Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{item_id}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Access Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "Delete Access Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{requestId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "With this API, users can delete a specific policy request they no longer need or wish to process."
					},
					"response": []
				},
				{
					"name": "Create Access Request for Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{item_id}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Access Request for Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "Put Access Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestId\": \"{{requestId}}\",\n  \"status\": \"granted\",\n  \"expiryAt\": \"2030-03-05T20:00:19\",\n  \"constraints\": {\n    \"access\": [\n      \"api\",\n      \"sub\",\n      \"file\"\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API provides the capability to grant or reject policy requests. Users can use this endpoint to make decisions on the submitted requests, thereby managing policy access."
					},
					"response": []
				}
			],
			"description": "This collection enables users to initiate policy requests, retrieve a list of generated requests, remove policy requests, and offers functionality to either approve or reject these requests."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}