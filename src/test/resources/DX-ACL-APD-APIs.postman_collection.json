{
	"info": {
		"_postman_id": "09cb3113-fa75-4623-9d1d-33481303ec26",
		"name": "DX-ACL-APD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "token",
			"item": [
				{
					"name": "Get Provider token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{resourceServerUrl}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{providerRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the provider token."
					},
					"response": []
				},
				{
					"name": "Get Consumer token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{resourceServerUrl}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{consumerRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the consumer token."
					},
					"response": []
				},
				{
					"name": "Get Provider Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{providerDelegationId}}",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{resourceServerUrl}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{delegateRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the provider delegate token."
					},
					"response": []
				},
				{
					"name": "Get Provider Delegate token (For Forbidden condition)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"providerDelegateTokenForbidden\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{providerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{forbiddenProviderDelegationId}}",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{rsUrlForForbiddenResponse}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{delegateRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the provider delegate token."
					},
					"response": []
				},
				{
					"name": "Get Consumer Delegate token (via client-id, secret)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerDelegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{consumerDelegationId}}",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{resourceServerUrl}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{delegateRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the consumer delegate token."
					},
					"response": []
				},
				{
					"name": "Get Consumer Delegate token (For Forbidden response)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"consumerDelegateTokenForbidden\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerDelegateClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerDelegateClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							},
							{
								"key": "delegationId",
								"value": "{{forbiddenConsumerDelegationId}}",
								"description": "The delegation ID determines which user + role + resource server the token request is being made on behalf by the delegate.It's the ID of the delegation that you can get using the GET delegates API on the auth server.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{rsUrlForForbiddenResponse}}\",\n    \"itemType\": \"{{itemType}}\",\n    \"role\": \"{{delegateRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the consumer delegate token."
					},
					"response": []
				}
			],
			"description": "The collection comprises APIs that provide the Identity Access Token, which is essential for executing Policy and Access Request APIs."
		},
		{
			"name": "policy",
			"item": [
				{
					"name": "200 Verify Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isPipeline = pm.environment.get('isIntegrationTestBeingRunInPipeline') == 'true';",
									"",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Allow\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\n    \"name\": {\n    \"firstName\":\"Vasanth\",\n    \"lastName\":\"Rajaraman\"\n    },\n    \"email\": \"vasanth.rajaraman@datakaveri.org\"\n  },\n  \"owner\": {\n    \"id\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\n    \"name\": {\n    \"firstName\":\"B\",\n    \"lastName\":\"Robert A B C D\"\n    },\n    \"email\": \"bryanrobert@iisc.ac.in\"\n  },\n   \"item\": {\n     \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n     \"itemType\": \"resource_group\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Verify Policy: No Policy Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isPipeline = pm.environment.get('isIntegrationTestBeingRunInPipeline') == 'true';",
									"",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:apd:Deny\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"No policy exist for given Resource Group\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource_group\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Verify Policy: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isPipeline = pm.environment.get('isIntegrationTestBeingRunInPipeline') == 'true';",
									"// Test the response code",
									"(isPipeline ? pm.test.skip : pm.test)(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipeline ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:backend\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n    \"name\": {\n    \"firstName\":\"demo\",\n    \"lastName\":\"name\"\n    },\n    \"email\": \"abc31111111221ac@xyz.com\"\n  },\n  \"owner\": {\n    \"id\": \"4e563a5f-35f0-4f32-92be-8830775a1c5e\",\n    \"name\": {\n    \"firstName\":\"Test\",\n    \"lastName\":\"provider\"\n    },\n    \"email\": \"testprovider@example.com\"\n  },\n   \"item\": {\n     \"itemId\": \"d67a19d5-9a26-5d7c-b0e7-58e7f3b222e2\",\n     \"itemType\": \"resource\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Create Policy: Success (For Verify Policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"{{consumerEmailIdForVerifyPolicy}}\",\n      \"itemId\": \"{{itemIdForVerify}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3000-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "This API allows users to create new policies. Users can define and configure policies based on their specific requirements using this endpoint."
					},
					"response": []
				},
				{
					"name": "Verify Policy check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const isPipelineForDev = pm.environment.get('isIntegrationTestBeingRunInCiPipelineForDev') == 'true';",
									"// Test the response code",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"(isPipelineForDev ? pm.test.skip : pm.test)(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Token created\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{consumerClientId}}",
								"type": "text",
								"description": "Client ID (UUID)"
							},
							{
								"key": "clientSecret",
								"value": "{{consumerClientSecret}}",
								"type": "text",
								"description": "Client secret (40 chars in hexadecimal)"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{itemIdForVerify}}\",\n    \"itemType\": \"{{itemTypeForVerify}}\",\n    \"role\": \"{{consumerRole}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authEndpoint}}{{authBasePath}}/token",
							"host": [
								"{{authEndpoint}}{{authBasePath}}"
							],
							"path": [
								"token"
							]
						},
						"description": "This API supplies the consumer token."
					},
					"response": []
				},
				{
					"name": "Get Policy: Success (Get the policy ID to delete the verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "Delete Policy : Success (Delete the Successfully verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				},
				{
					"name": "200 Create Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"consumer@dummyId.com\",\n      \"itemId\": \"{{item_id}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3000-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      },\n    \"additionalInfo\": {\n          \"key\": \"dummyValue\" \n      },\n      \"providerComment\": \"This is a sample provider comment\",\n      \"feedbackToConsumer\": \"This is a sample consumer comment\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "This API allows users to create new policies. Users can define and configure policies based on their specific requirements using this endpoint."
					},
					"response": []
				},
				{
					"name": "400 Create Policy : Bad Request Item Not Present",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Item id given is not present\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"d67a19d5-0a26-5d7c-b0e7-58e7f3b222e3\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Create Policy : Bad Request Expiry Time in Past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Expiry time must be a future date/time\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"d67a19d5-0a26-5d7c-b0e7-58e7f3b222e3\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2021-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"test_consumers@xyz.com\",\n      \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    },\n        {\n      \"userEmail\": \"dummy_consumers@xyz.com\",\n      \"itemId\": \"8b95ab80-2aaf-4636-a65e-7f2563d0d371\",\n      \"itemType\": \"RESOURCE_GROUP\",\n      \"expiryTime\": \"2024-08-25T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\",\n          \"file\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Create Policy : Forbidden OwnerShip Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this resource.\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"abd311111112c@xyz.com\",\n      \"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9a\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3024-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 Create Policy : Conflict Duplicate Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"consumer@dummyId.com\",\n      \"itemId\": \"{{item_id}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3000-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Get Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "401 Get Policy: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "skdfjksdfjg",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Delete Policy:  Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this policy.\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				},
				{
					"name": "400 Delete Policy: Bad Request [Policy not active, expired, or withdrawn]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as policy is not ACTIVE\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Policy : Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"b5dd534d-231c-4674-8167-2e39467d0643\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Policy: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Policy could not be deleted, as it doesn't exist\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"394608f9-b370-4606-a947-1cf300dab04c\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "access request",
			"item": [
				{
					"name": "200 Create Access Request for Delete: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"{{item_id}}\",\n    \"itemType\": \"RESOURCE\",\n    \"additionalInfo\": {\n        \"name\": \"Test consumer\",\n        \"email\": \"testConsumer@testCorp.org\",\n        \"phoneNo\": 9123456780,\n        \"purpose\": \"research\",\n        \"description\": \"This a description of how the data from the resource would be used\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "400 Create Access Request: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"ae2b8b01-f642-411a-babb-cbd1b75fa2a1\",\n\"itemType\": \"RESOURCE_GROUP\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Create Access Request: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f9b\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 Create Access Request: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{itemIdForForbiddenResponse}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Create Access Request: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"a347c5b6-5281-4749-9eab-89784d8f8f98\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 Create Access Request: Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{item_id}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Get Access Request: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "401 Get Access Request: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "sdfsfgsfg",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Get Access Request: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Access request not found, for the server : iudx-rs-onem2m.iiit.ac.in\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Delete Access Request: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{requestId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "With this API, users can delete a specific policy request they no longer need or wish to process."
					},
					"response": []
				},
				{
					"name": "400 Delete Access Request: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{requestId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Delete Access Request: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d13\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Delete Access Request: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be withdrawn, as it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"e9a329aa-352a-417e-82c0-0f68f08e0d11\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Access Request for Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{item_id}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Access Request for Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "200 Put Access Request: Success [Reject]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"{{requestId}}\",\n    \"status\": \"rejected\",\n    \"providerComment\": \"The resource is used for transportation data analysis\",\n    \"feedbackToConsumer\": \"This resource can be used for testing purposes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Access Request for Put (For Rejecting the new request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{item_id}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Access Request for Put (For Fetching the new request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "403 Put Access Request: Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 403 (Forbidden)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:forbidden\");",
									"    pm.expect(body).to.have.property(\"title\", \"Forbidden\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Access Denied: You do not have ownership rights for this resource.\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateTokenForbidden}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"{{requestId}}\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\n        \"access\": [\n            \"api\",\n            \"sub\",\n            \"file\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 Put Access Request: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestId\": \"{{requestId}}\",\n  \"status\": \"granted\",\n  \"expiryAt\": \"3000-03-05T20:00:19\",\n  \"constraints\": {\n    \"access\": [\n      \"api\",\n      \"sub\",\n      \"file\"\n    ]\n  },\n  \"providerComment\": \"This resource is related to transportation data analysis\",\n  \"feedbackToConsumer\": \"This resource could be used for testing\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API provides the capability to grant or reject policy requests. Users can use this endpoint to make decisions on the submitted requests, thereby managing policy access."
					},
					"response": []
				},
				{
					"name": "200 Get Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "200 Delete Policy : Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				},
				{
					"name": "Create Access Request for Delete: Success (For 409 Update Notification response)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"itemId\": \"{{itemIdForVerify}}\",\n\"itemType\": \"RESOURCE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "This API allows users to create a new policy request. Users can submit their requests for specific policies using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Access Request: Success (To get requestId for 409 Update Notification)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "Create Policy: Success (For 409 Update Notification Response)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"{{consumerEmailIdForVerifyPolicy}}\",\n      \"itemId\": \"{{itemIdForVerify}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3000-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "This API allows users to create new policies. Users can define and configure policies based on their specific requirements using this endpoint."
					},
					"response": []
				},
				{
					"name": "409 Put Access Request: Conflict [Policy already created]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Test the response code",
									"pm.test(\"response is 409 (Conflict)\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:conflict\");",
									"    pm.expect(body).to.have.property(\"title\", \"Conflict\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"{{requestId}}\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"3000-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Access Request: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='PENDING')",
									"    {",
									"        console.log(props.requestId)",
									"        postman.setEnvironmentVariable(\"requestId\", props.requestId);",
									"        break;",
									"    }",
									"}",
									"",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "Users can utilize this API to retrieve a list of all the policy requests they have generated or retrieve a list of all the policy requests which are generated for them. It provides an overview of the existing requests."
					},
					"response": []
				},
				{
					"name": "Delete Access Request: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{requestId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						},
						"description": "With this API, users can delete a specific policy request they no longer need or wish to process."
					},
					"response": []
				},
				{
					"name": "200 Get Policy: Success (Get the policy ID to delete the verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "200 Delete Policy : Success (Delete the Successfully verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				},
				{
					"name": "400 Put Access Request: Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 400 (Bad Request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:badRequest\");",
									"    pm.expect(body).to.have.property(\"title\", \"Bad Request\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"{{requestId}}\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2020-03-05T20:00:19\",\n    \"constraints\": {\n        \"access\": [\n            \"api\",\n            \"sub\",\n            \"file\"\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Put Access Request: Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 401 (Not Authorized)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:invalidAuthorizationToken\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Authorized\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Not Authorized\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e85db7-c4b7-4471-a95d-75b4e39f4b50\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 Put Access Request: Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 404 (Not Found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:resourceNotFound\");",
									"    pm.expect(body).to.have.property(\"title\", \"Not Found\");",
									"    pm.expect(body).to.have.property(\"detail\", \"Request could not be updated, as it is not found\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requestId\": \"d9e86db7-c4b7-4471-a95d-75b4e39f4b51\",\n    \"status\": \"granted\",\n    \"expiryAt\": \"2024-03-05T20:00:19\",\n    \"constraints\": {\"access\": [\"api\",\"sub\",\"file\"]}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies/requests",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Policy: Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"request\": [\n    {\n      \"userEmail\": \"{{consumerEmailIdForVerifyPolicy}}\",\n      \"itemId\": \"{{itemIdForVerify}}\",\n      \"itemType\": \"RESOURCE\",\n      \"expiryTime\": \"3000-08-04T20:00:19\",\n      \"constraints\": {\n        \"access\": [\n          \"sub\"\n        ]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "This API allows users to create new policies. Users can define and configure policies based on their specific requirements using this endpoint."
					},
					"response": []
				},
				{
					"name": "Get Policy: Success (Get the policy ID to delete the verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResult = JSON.parse(responseBody).results",
									"for(const props of jsonResult){",
									"if(props.status=='ACTIVE')",
									"    {",
									"        console.log(props.policyId)",
									"        postman.setEnvironmentVariable(\"policyId\", props.policyId);",
									"        break",
									"    }",
									"}",
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{consumerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "Users can use this API to retrieve a list of policies that have been previously created. It provides a way to view and access the details of existing policies in the system."
					},
					"response": []
				},
				{
					"name": "Delete Policy : Success (Delete the Successfully verified policy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response code",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response header",
									"pm.test(\"Check response header\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:acl:success\");",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerToken}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{providerDelegateToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": \"{{policyId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}{{basePath}}/policies",
							"host": [
								"{{baseUrl}}{{basePath}}"
							],
							"path": [
								"policies"
							]
						},
						"description": "With the Delete Policy API, users can remove policies that are no longer required."
					},
					"response": []
				}
			],
			"description": "This collection enables users to initiate policy requests, retrieve a list of generated requests, remove policy requests, and offers functionality to either approve or reject these requests."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}